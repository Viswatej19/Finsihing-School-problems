/*
Ismart Shankar is given a set of N pluck cards, each card labelled with a number on it, and he is also
given a difference value as ‘D’.
Now Ismart Shankar has to find out the length of the largest arithmetic set ‘S’.

A subset is called as arithmetic set, iff the difference between the numbers on any two adjacent cards is same as D.

A subset can be derived from the set of N pluck cads by deleting some or no cards without changing the order of the remaining cards.

Input Format:
------------- 
Line-1: Two space separated integers N, D, number of cards, difference.
Line-2: N space separated integers, numbers on the set of cards.

Output Format:
--------------
Print an integer, length of longest arithmetic subset.

Sample Test Case- 1
input = 4 1
1 2 3 4
output = 4

Explanation: The longest arithmetic subset is [1,2,3,4].


Sample Test Case- 2
input = 4 1
1 3 5 7
output = 1

Explanation: The longest arithmetic subset is any single element.


Sample Test Case- 3
Input = 9 -2
1 5 7 8 5 3 4 2 1
output = 4

Explanation: The longest arithmetic susbset is [7,5,3,1].
*/
import java.util.*;
class q1{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int d=sc.nextInt();
        ArrayList <Integer> al=new ArrayList <Integer> ();
        for(int i=0;i<n;i++)
            al.add(sc.nextInt());
        
        int count=1;
        int max=-1;
        ArrayList <Integer> dup=new ArrayList <Integer> ();
        for(int i=0;i<n;i++){
            count=1;
            int j=i;
            dup.addAll(al);
            //System.out.println(dup);
            while(j<dup.size()-1){
                int x=(int)dup.get(j+1)-(int)dup.get(j);
                if(x==d){
                    count++;
                    j++;
                }
                else{
                    dup.remove(j+1);
                }
            }
            //System.out.println(dup);
            //System.out.println(al);
            dup.clear();
            if(max<count){
                max=count;
            }
        }
        System.out.println(max);
    }
}
